Sure! Let's go through each of these problems related to Stacks and Queues, providing solutions in Java, Python, C++, JavaScript, and Go, with explanations.

### 1. Valid Parentheses

#### Problem
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if:
1. Open brackets must be closed by the same type of brackets.
2. Open brackets must be closed in the correct order.

#### Java
```java
import java.util.Stack;

public class ValidParentheses {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (c == '(') stack.push(')');
            else if (c == '{') stack.push('}');
            else if (c == '[') stack.push(']');
            else if (stack.isEmpty() || stack.pop() != c) return false;
        }
        return stack.isEmpty();
    }
}
```

#### Python
```python
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {')': '(', '}': '{', ']': '['}
        for char in s:
            if char in mapping:
                top_element = stack.pop() if stack else '#'
                if mapping[char] != top_element:
                    return False
            else:
                stack.append(char)
        return not stack
```

#### C++
```cpp
#include <stack>
#include <unordered_map>

class Solution {
public:
    bool isValid(string s) {
        stack<char> stack;
        unordered_map<char, char> mapping = {{')', '('}, {'}', '{'}, {']', '['}};
        for (char c : s) {
            if (mapping.count(c)) {
                char top_element = stack.empty() ? '#' : stack.top();
                stack.pop();
                if (top_element != mapping[c]) return false;
            } else {
                stack.push(c);
            }
        }
        return stack.empty();
    }
};
```

#### JavaScript
```javascript
var isValid = function(s) {
    const stack = [];
    const mapping = {')': '(', '}': '{', ']': '['};
    for (let char of s) {
        if (mapping[char]) {
            const topElement = stack.length === 0 ? '#' : stack.pop();
            if (topElement !== mapping[char]) return false;
        } else {
            stack.push(char);
        }
    }
    return stack.length === 0;
};
```

#### Go
```go
func isValid(s string) bool {
    stack := []rune{}
    mapping := map[rune]rune{')': '(', '}': '{', ']': '['}
    for _, char := range s {
        if open, ok := mapping[char]; ok {
            if len(stack) == 0 || stack[len(stack)-1] != open {
                return false
            }
            stack = stack[:len(stack)-1]
        } else {
            stack = append(stack, char)
        }
    }
    return len(stack) == 0
}
```

### 2. Min Stack

#### Problem
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

#### Java
```java
import java.util.Stack;

public class MinStack {
    private Stack<Integer> stack;
    private Stack<Integer> minStack;

    public MinStack() {
        stack = new Stack<>();
        minStack = new Stack<>();
    }

    public void push(int x) {
        stack.push(x);
        if (minStack.isEmpty() || x <= minStack.peek()) {
            minStack.push(x);
        }
    }

    public void pop() {
        if (stack.pop().equals(minStack.peek())) {
            minStack.pop();
        }
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }
}
```

#### Python
```python
class MinStack:

    def __init__(self):
        self.stack = []
        self.min_stack = []

    def push(self, x: int) -> None:
        self.stack.append(x)
        if not self.min_stack or x <= self.min_stack[-1]:
            self.min_stack.append(x)

    def pop(self) -> None:
        if self.stack.pop() == self.min_stack[-1]:
            self.min_stack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.min_stack[-1]
```

#### C++
```cpp
#include <stack>

class MinStack {
private:
    std::stack<int> stack;
    std::stack<int> minStack;

public:
    MinStack() {}

    void push(int x) {
        stack.push(x);
        if (minStack.empty() || x <= minStack.top()) {
            minStack.push(x);
        }
    }

    void pop() {
        if (stack.top() == minStack.top()) {
            minStack.pop();
        }
        stack.pop();
    }

    int top() {
        return stack.top();
    }

    int getMin() {
        return minStack.top();
    }
};
```

#### JavaScript
```javascript
var MinStack = function() {
    this.stack = [];
    this.minStack = [];
};

MinStack.prototype.push = function(x) {
    this.stack.push(x);
    if (this.minStack.length === 0 || x <= this.minStack[this.minStack.length - 1]) {
        this.minStack.push(x);
    }
};

MinStack.prototype.pop = function() {
    if (this.stack.pop() === this.minStack[this.minStack.length - 1]) {
        this.minStack.pop();
    }
};

MinStack.prototype.top = function() {
    return this.stack[this.stack.length - 1];
};

MinStack.prototype.getMin = function() {
    return this.minStack[this.minStack.length - 1];
};
```

#### Go
```go
type MinStack struct {
    stack    []int
    minStack []int
}

func Constructor() MinStack {
    return MinStack{}
}

func (this *MinStack) Push(x int) {
    this.stack = append(this.stack, x)
    if len(this.minStack) == 0 || x <= this.minStack[len(this.minStack)-1] {
        this.minStack = append(this.minStack, x)
    }
}

func (this *MinStack) Pop() {
    if this.stack[len(this.stack)-1] == this.minStack[len(this.minStack)-1] {
        this.minStack = this.minStack[:len(this.minStack)-1]
    }
    this.stack = this.stack[:len(this.stack)-1]
}

func (this *MinStack) Top() int {
    return this.stack[len(this.stack)-1]
}

func (this *MinStack) GetMin() int {
    return this.minStack[len(this.minStack)-1]
}
```

### 3. Implement Queue using Stack

#### Problem
Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `pop`, `peek`, `empty`).

#### Java
```java
import java.util.Stack;

public class MyQueue {
    private Stack<Integer> stack1;
    private Stack<Integer> stack2;

    public MyQueue() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }

    public void push(int x) {
        stack1.push(x);
    }

    public int pop() {
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.pop();
    }

    public int peek() {
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.peek();
    }

    public boolean empty() {
        return stack1.isEmpty() && stack2.isEmpty();
    }
}
```

#### Python
```python
class MyQueue:

    def __init__(self):
        self.stack1 = []
        self.stack2 = []

    def push(self, x: int) -> None:
        self.stack1.append(x)

    def pop(self) -> int:
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        return self.stack2.pop()

    def peek(self) -> int:
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        return self.stack2[-1]

    def empty(self) -> bool:
        return not self.stack1 and not self.stack2
```

#### C++
```cpp
#include <stack>

class MyQueue {
private:
    std::stack<int> stack1;
    std::stack<int> stack2;

public:
    MyQueue() {}

    void push(int x) {
        stack1.push(x);
    }

    int pop() {
        if (stack2.empty()) {
            while (!stack1.empty()) {
                stack2.push(stack1.top());
                stack1.pop();
            }
        }
        int top = stack2.top();
        stack2.pop();
        return top;
    }

    int peek() {
        if (stack2.empty()) {
            while (!stack1.empty()) {
                stack2.push(stack1.top());
                stack1.pop();
            }
        }
        return stack2.top();
    }

    bool empty() {
        return stack1.empty() && stack2.empty();
    }
};
```

#### Java
Got it! Let's go through the "Sliding Window Maximum" problem and provide solutions in Java, Python, C++, JavaScript, and Go, with explanations.

### 4. Sliding Window Maximum

#### Problem
Given an array `nums` and a sliding window size `k`, return the maximum value in each sliding window of size `k`.

#### Java
```java
import java.util.*;

public class SlidingWindowMaximum {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || nums.length == 0) return new int[0];
        int n = nums.length;
        int[] result = new int[n - k + 1];
        Deque<Integer> deque = new LinkedList<>();
        
        for (int i = 0; i < n; i++) {
            // Remove elements not within the sliding window
            if (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {
                deque.pollFirst();
            }
            // Remove elements smaller than the current element
            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {
                deque.pollLast();
            }
            // Add the current element at the end of the deque
            deque.offerLast(i);
            // The front of the deque is the largest element in the current window
            if (i >= k - 1) {
                result[i - k + 1] = nums[deque.peekFirst()];
            }
        }
        return result;
    }
}
```

#### Python
```python
from collections import deque

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums:
            return []
        result = []
        deque = collections.deque()
        
        for i in range(len(nums)):
            # Remove elements not within the sliding window
            if deque and deque[0] < i - k + 1:
                deque.popleft()
            # Remove elements smaller than the current element
            while deque and nums[deque[-1]] < nums[i]:
                deque.pop()
            # Add the current element at the end of the deque
            deque.append(i)
            # The front of the deque is the largest element in the current window
            if i >= k - 1:
                result.append(nums[deque[0]])
        return result
```

#### C++
```cpp
#include <deque>
#include <vector>

class Solution {
public:
    std::vector<int> maxSlidingWindow(std::vector<int>& nums, int k) {
        if (nums.empty()) return {};
        std::vector<int> result;
        std::deque<int> deque;
        
        for (int i = 0; i < nums.size(); ++i) {
            // Remove elements not within the sliding window
            if (!deque.empty() && deque.front() < i - k + 1) {
                deque.pop_front();
            }
            // Remove elements smaller than the current element
            while (!deque.empty() && nums[deque.back()] < nums[i]) {
                deque.pop_back();
            }
            // Add the current element at the end of the deque
            deque.push_back(i);
            // The front of the deque is the largest element in the current window
            if (i >= k - 1) {
                result.push_back(nums[deque.front()]);
            }
        }
        return result;
    }
};
```

#### JavaScript
```javascript
var maxSlidingWindow = function(nums, k) {
    if (nums.length === 0) return [];
    const result = [];
    const deque = [];
    
    for (let i = 0; i < nums.length; i++) {
        // Remove elements not within the sliding window
        if (deque.length && deque[0] < i - k + 1) {
            deque.shift();
        }
        // Remove elements smaller than the current element
        while (deque.length && nums[deque[deque.length - 1]] < nums[i]) {
            deque.pop();
        }
        // Add the current element at the end of the deque
        deque.push(i);
        // The front of the deque is the largest element in the current window
        if (i >= k - 1) {
            result.push(nums[deque[0]]);
        }
    }
    return result;
};
```

#### Go
```go
func maxSlidingWindow(nums []int, k int) []int {
    if len(nums) == 0 {
        return []int{}
    }
    result := []int{}
    deque := []int{}
    
    for i := 0; i < len(nums); i++ {
        // Remove elements not within the sliding window
        if len(deque) > 0 && deque[0] < i - k + 1 {
            deque = deque[1:]
        }
        // Remove elements smaller than the current element
        for len(deque) > 0 && nums[deque[len(deque)-1]] < nums[i] {
            deque = deque[:len(deque)-1]
        }
        // Add the current element at the end of the deque
        deque = append(deque, i)
        // The front of the deque is the largest element in the current window
        if i >= k - 1 {
            result = append(result, nums[deque[0]])
        }
    }
    return result
}
```

### Explanation

1. **Deque**: We use a deque (double-ended queue) to store indices of elements in the current window. The deque helps us keep track of the maximum element in the current window efficiently.
2. **Remove Out-of-Window Elements**: Before adding a new element, we remove elements from the front of the deque that are out of the current window.
3. **Remove Smaller Elements**: We remove elements from the back of the deque that are smaller than the current element because they will not be needed anymore.
4. **Add Current Element**: We add the current element's index to the back of the deque.
5. **Store Maximum**: The front of the deque always contains the index of the maximum element for the current window. We store this maximum in the result array.

I hope this helps! If you have any more questions or need further clarification, feel free to ask. 😊

Source: Conversation with Copilot, 2/11/2025
(1) github.com. https://github.com/ApplePapaya/Problems/tree/51357fc22dcc557948aa6f3edd7c8e5abcf6a4cc/Programs%2Fsrc%2Fcom%2Frun%2Fleetcode%2Farrays%2FSlidingWindowMaximum239.java.