# **GraphQL in Node.js: A Professional Guide**  

[GraphQL](https://graphql.org/) is a **query language for APIs** that enables clients to request only the data they need. It provides **strong typing, a single endpoint, and real-time capabilities**, making it a **powerful alternative to REST APIs**.

---

## **1. Why Use GraphQL?**  

âœ… **Flexible Queries** â€“ Clients request only specific fields, reducing over-fetching.  
âœ… **Strongly Typed Schema** â€“ Ensures API reliability with type safety.  
âœ… **Single Endpoint** â€“ Unlike REST, which requires multiple endpoints, GraphQL has one.  
âœ… **Real-time Data** â€“ Supports **subscriptions** for live updates.  
âœ… **Better Developer Experience** â€“ Introspective API with built-in documentation.  

---

## **2. Setting Up GraphQL in a Node.js Project**  

### **2.1 Install Required Dependencies**  
```bash
npm init -y
npm install express express-graphql graphql cors
```

### **2.2 Project Structure**
```
/graphql-api
â”‚â”€â”€ /src
â”‚   â”œâ”€â”€ schema.js
â”‚   â”œâ”€â”€ server.js
â”‚â”€â”€ package.json
```

---

## **3. Creating a Basic GraphQL Server**  

### **3.1 Define the Schema (`schema.js`)**
GraphQL **schema** defines types, queries, and mutations.

```javascript
const { GraphQLObjectType, GraphQLSchema, GraphQLString } = require("graphql");

// Define a simple query
const RootQuery = new GraphQLObjectType({
  name: "RootQueryType",
  fields: {
    greeting: {
      type: GraphQLString,
      resolve() {
        return "Hello, GraphQL!";
      }
    }
  }
});

// Export schema
module.exports = new GraphQLSchema({
  query: RootQuery
});
```

---

### **3.2 Setting Up Express with GraphQL (`server.js`)**
```javascript
const express = require("express");
const { graphqlHTTP } = require("express-graphql");
const schema = require("./schema");
const cors = require("cors");

const app = express();
app.use(cors());

app.use(
  "/graphql",
  graphqlHTTP({
    schema,
    graphiql: true // Enables GraphiQL UI for testing
  })
);

app.listen(4000, () => {
  console.log("GraphQL Server running on http://localhost:4000/graphql");
});
```

---

## **4. Running the GraphQL Server**  
Start the server:
```bash
node src/server.js
```

Go to **http://localhost:4000/graphql** and test a query:  

```graphql
{
  greeting
}
```

---

## **5. Creating a More Complex API (Users Example)**  

### **5.1 Defining a User Type and Query (`schema.js`)**  
```javascript
const {
  GraphQLObjectType,
  GraphQLSchema,
  GraphQLString,
  GraphQLInt,
  GraphQLList
} = require("graphql");

// Sample data
const users = [
  { id: 1, name: "Alice", age: 25 },
  { id: 2, name: "Bob", age: 30 }
];

// User Type
const UserType = new GraphQLObjectType({
  name: "User",
  fields: {
    id: { type: GraphQLInt },
    name: { type: GraphQLString },
    age: { type: GraphQLInt }
  }
});

// Root Query
const RootQuery = new GraphQLObjectType({
  name: "RootQueryType",
  fields: {
    users: {
      type: new GraphQLList(UserType),
      resolve() {
        return users;
      }
    },
    user: {
      type: UserType,
      args: { id: { type: GraphQLInt } },
      resolve(_, args) {
        return users.find(user => user.id === args.id);
      }
    }
  }
});

module.exports = new GraphQLSchema({
  query: RootQuery
});
```

---

### **5.2 Querying Data**  
Run the server and test:

```graphql
{
  users {
    id
    name
    age
  }
}
```

Response:
```json
{
  "data": {
    "users": [
      { "id": 1, "name": "Alice", "age": 25 },
      { "id": 2, "name": "Bob", "age": 30 }
    ]
  }
}
```

---

## **6. Adding Mutations (Creating and Updating Data)**  

### **6.1 Define Mutations in `schema.js`**  
```javascript
const {
  GraphQLNonNull,
  GraphQLInputObjectType
} = require("graphql");

// Input type for adding users
const UserInputType = new GraphQLInputObjectType({
  name: "UserInput",
  fields: {
    name: { type: new GraphQLNonNull(GraphQLString) },
    age: { type: new GraphQLNonNull(GraphQLInt) }
  }
});

// Mutation
const Mutation = new GraphQLObjectType({
  name: "Mutation",
  fields: {
    addUser: {
      type: UserType,
      args: { input: { type: UserInputType } },
      resolve(_, { input }) {
        const newUser = { id: users.length + 1, ...input };
        users.push(newUser);
        return newUser;
      }
    }
  }
});

module.exports = new GraphQLSchema({
  query: RootQuery,
  mutation: Mutation
});
```

---

### **6.2 Running a Mutation (Adding a User)**  
```graphql
mutation {
  addUser(input: { name: "Charlie", age: 28 }) {
    id
    name
    age
  }
}
```

Response:
```json
{
  "data": {
    "addUser": {
      "id": 3,
      "name": "Charlie",
      "age": 28
    }
  }
}
```

---

## **7. Real-Time GraphQL with Subscriptions**  

Install **GraphQL subscriptions**:
```bash
npm install graphql-subscriptions ws
```

Modify `server.js` for WebSockets:
```javascript
const { createServer } = require("http");
const { WebSocketServer } = require("ws");
const { useServer } = require("graphql-ws/lib/use/ws");
const { makeExecutableSchema } = require("@graphql-tools/schema");
const { PubSub } = require("graphql-subscriptions");

const pubsub = new PubSub();
const MESSAGE_ADDED = "MESSAGE_ADDED";

// Subscription Type
const Subscription = new GraphQLObjectType({
  name: "Subscription",
  fields: {
    messageAdded: {
      type: GraphQLString,
      subscribe: () => pubsub.asyncIterator([MESSAGE_ADDED])
    }
  }
});

// Emit Event
setInterval(() => {
  pubsub.publish(MESSAGE_ADDED, { messageAdded: "New Message at " + new Date() });
}, 5000);

// Setup WebSocket server
const schema = makeExecutableSchema({
  typeDefs: typeDefs,
  resolvers: { Subscription }
});

const server = createServer(app);
const wsServer = new WebSocketServer({ server });

useServer({ schema }, wsServer);

server.listen(4000, () => {
  console.log("GraphQL WebSocket Server running on ws://localhost:4000");
});
```

---

## **8. Conclusion & Best Practices**  

âœ… **Use GraphQL for flexible, scalable APIs** in modern applications.  
âœ… **Enable caching & pagination** for performance optimization.  
âœ… **Use GraphQL Subscriptions** for real-time data updates.  
âœ… **Integrate GraphQL with databases** like PostgreSQL (TypeORM), MongoDB, or Prisma.  

Would you like **GraphQL integration with MySQL for your eCommerce project**? ðŸš€