### **Moment.js: A Comprehensive Guide**  

**Moment.js** is a powerful JavaScript library for handling dates and times, allowing you to parse, validate, manipulate, and format dates with ease. While newer JavaScript features like **Intl.DateTimeFormat** and **Temporal API** are becoming standard, Moment.js remains widely used in legacy projects and applications requiring complex date logic.

---

## **1. Installation**  

You can install Moment.js via **npm**, **yarn**, or a CDN:

```bash
npm install moment --save
```

```bash
yarn add moment
```

For browser usage, include the CDN:

```html
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
```

---

## **2. Basic Usage**  

### **Getting the Current Date & Time**
```javascript
const moment = require('moment');

console.log(moment().format()); // 2025-03-13T12:00:00+00:00
```

### **Custom Formatting**
You can format dates using a variety of predefined patterns:
```javascript
console.log(moment().format('YYYY-MM-DD')); // 2025-03-13
console.log(moment().format('dddd, MMMM Do YYYY, h:mm:ss a')); // Thursday, March 13th 2025, 5:30:15 pm
console.log(moment().format('hh:mm A')); // 05:30 PM
```

---

## **3. Parsing Dates**  

Moment.js allows you to parse various date formats:

```javascript
console.log(moment("2025-03-13", "YYYY-MM-DD").format("MMMM Do, YYYY")); // March 13th, 2025
```

It also supports ISO 8601:

```javascript
console.log(moment("2025-03-13T12:00:00Z").format()); // 2025-03-13T12:00:00+00:00
```

You can check if a date is valid:

```javascript
console.log(moment("2025-02-30", "YYYY-MM-DD").isValid()); // false
```

---

## **4. Manipulating Dates**  

Moment.js provides **methods to add, subtract, and modify** date values.

### **Adding and Subtracting Time**
```javascript
console.log(moment().add(7, 'days').format('YYYY-MM-DD')); // Adds 7 days
console.log(moment().subtract(3, 'months').format('YYYY-MM-DD')); // Subtracts 3 months
```

### **Start and End of Time Units**
```javascript
console.log(moment().startOf('month').format('YYYY-MM-DD HH:mm:ss')); // Start of the month
console.log(moment().endOf('year').format('YYYY-MM-DD HH:mm:ss')); // End of the year
```

---

## **5. Comparing Dates**  

Moment.js makes it easy to compare dates.

### **Difference Between Two Dates**
```javascript
const date1 = moment("2025-03-13");
const date2 = moment("2025-12-25");

console.log(date2.diff(date1, 'days')); // 287 days
console.log(date2.diff(date1, 'months')); // 9 months
```

### **Checking If a Date is Before or After Another**
```javascript
console.log(moment("2025-03-13").isBefore("2025-12-25")); // true
console.log(moment("2025-03-13").isAfter("2025-01-01")); // true
```

---

## **6. Time Zones with Moment-Timezone**
Moment.js itself does not support time zones, but **Moment-Timezone** extends it.

### **Install Moment-Timezone**
```bash
npm install moment-timezone --save
```

### **Using Moment-Timezone**
```javascript
const moment = require('moment-timezone');

console.log(moment().tz("America/New_York").format()); // 2025-03-13T08:00:00-04:00
console.log(moment().tz("Asia/Tokyo").format()); // 2025-03-13T21:00:00+09:00
```

---

## **7. Relative Time (From Now)**
Moment.js can calculate **relative times** dynamically.

```javascript
console.log(moment("2025-03-20").fromNow()); // in 7 days
console.log(moment("2024-12-31").fromNow()); // 2 months ago
```

Or display relative differences:

```javascript
console.log(moment("2025-03-13").to("2025-12-25")); // in 9 months
console.log(moment("2025-12-25").to("2025-03-13")); // 9 months ago
```

---

## **8. Localized Dates (Internationalization)**
Moment.js supports multiple languages and locales.

### **Set and Display Locale**
```javascript
moment.locale('fr'); // Set to French
console.log(moment().format('LLLL')); // jeudi 13 mars 2025 12:00
```

### **List Available Locales**
```javascript
console.log(moment.locales()); // List of all available locales
```

---

## **9. Working with Unix Timestamps**
Moment.js can **convert timestamps** to readable dates.

### **Convert Timestamp to Date**
```javascript
console.log(moment.unix(1734567890).format("YYYY-MM-DD HH:mm:ss")); // 2025-01-17 02:44:50
```

### **Get Current Timestamp**
```javascript
console.log(moment().unix()); // Example: 1734567890
```

---

## **10. Best Practices & Alternatives**
While Moment.js is useful, it **adds extra bundle size** and is considered **legacy** by its maintainers. Alternatives include:

- **Luxon** (recommended by Moment.js maintainers)
- **date-fns** (tree-shakable, modular functions)
- **JavaScriptâ€™s Native Intl.DateTimeFormat & Temporal API**

Example of `date-fns`:
```javascript
const { format, addDays } = require('date-fns');

console.log(format(new Date(), 'yyyy-MM-dd')); // 2025-03-13
console.log(format(addDays(new Date(), 7), 'yyyy-MM-dd')); // Adds 7 days
```

---

## **Conclusion**
Moment.js is still widely used in production applications, particularly in **legacy codebases**. However, for new projects, consider modern alternatives like **Luxon** or **date-fns** for a more efficient and modular approach to date handling.

Would you like a **migration guide** from Moment.js to a modern library? ðŸš€