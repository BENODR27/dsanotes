### **Event-Driven Architecture in Node.js (Professional-Level Implementation)**  
Event-Driven Architecture (EDA) enables **loose coupling** between services using events and event emitters. It is commonly used in **microservices, eCommerce, and real-time applications**.

---

## **1. Basic Event-Driven Example using Node.js Events Module**
```javascript
const EventEmitter = require("events");

class OrderService extends EventEmitter {
  placeOrder(order) {
    console.log(`Order placed: ${order.id}`);
    this.emit("orderPlaced", order);
  }
}

class NotificationService {
  sendEmail(order) {
    console.log(`Email sent for order: ${order.id}`);
  }
}

// Instantiate services
const orderService = new OrderService();
const notificationService = new NotificationService();

// Register event listener
orderService.on("orderPlaced", (order) => notificationService.sendEmail(order));

// Trigger event
orderService.placeOrder({ id: 101, item: "Laptop" });
```
âœ… **Loose coupling:** `NotificationService` doesnâ€™t directly depend on `OrderService`.  

---

## **2. Event-Driven Architecture in a Microservices System**  
### **Use Case: Order Processing with Kafka (or RabbitMQ)**
In a **real-world eCommerce system**, different services communicate asynchronously. Hereâ€™s how **Kafka** can handle **order events**.

### **Step 1: Install Kafka Dependencies**
```sh
npm install kafkajs
```

### **Step 2: Setup Kafka Event Publisher (Order Service)**
```javascript
const { Kafka } = require("kafkajs");

const kafka = new Kafka({ clientId: "ecommerce", brokers: ["localhost:9092"] });
const producer = kafka.producer();

const placeOrder = async (order) => {
  await producer.connect();
  await producer.send({
    topic: "order-events",
    messages: [{ key: String(order.id), value: JSON.stringify(order) }],
  });
  console.log(`Order event sent: ${order.id}`);
  await producer.disconnect();
};

// Example usage
placeOrder({ id: 101, item: "Laptop", price: 1500 });
```

### **Step 3: Setup Kafka Event Consumer (Payment Service)**
```javascript
const { Kafka } = require("kafkajs");

const kafka = new Kafka({ clientId: "ecommerce", brokers: ["localhost:9092"] });
const consumer = kafka.consumer({ groupId: "payment-service" });

const processPayment = async () => {
  await consumer.connect();
  await consumer.subscribe({ topic: "order-events", fromBeginning: true });

  await consumer.run({
    eachMessage: async ({ message }) => {
      const order = JSON.parse(message.value);
      console.log(`Processing payment for order: ${order.id}`);
      // Add payment logic here
    },
  });
};

processPayment();
```
âœ… **Asynchronous, scalable, and fault-tolerant event-driven communication between services.**

---

## **3. Event-Driven Architecture using Redis Pub/Sub**
Redis can also be used for **event-driven messaging** in a microservices system.

### **Install Redis Client**
```sh
npm install ioredis
```

### **Publisher (Order Service)**
```javascript
const Redis = require("ioredis");
const publisher = new Redis();

const placeOrder = (order) => {
  console.log(`Placing order: ${order.id}`);
  publisher.publish("orderChannel", JSON.stringify(order));
};

// Example usage
placeOrder({ id: 202, item: "Phone" });
```

### **Subscriber (Payment Service)**
```javascript
const Redis = require("ioredis");
const subscriber = new Redis();

subscriber.subscribe("orderChannel", () => {
  console.log("Subscribed to order events.");
});

subscriber.on("message", (channel, message) => {
  const order = JSON.parse(message);
  console.log(`Processing payment for order: ${order.id}`);
});
```
âœ… **Fast, lightweight, and efficient for real-time applications like notifications and chat systems.**

---

## **4. Event-Driven Architecture with Event Bus (Using Node.js EventEmitter)**
For smaller applications, a simple **Event Bus** pattern using `EventEmitter` can be effective.

### **Create Event Bus**
```javascript
const EventEmitter = require("events");
class EventBus extends EventEmitter {}

module.exports = new EventBus();
```

### **Emit Events in Order Service**
```javascript
const eventBus = require("./EventBus");

const placeOrder = (order) => {
  console.log(`Order placed: ${order.id}`);
  eventBus.emit("orderPlaced", order);
};

// Example usage
placeOrder({ id: 303, item: "Tablet" });
```

### **Listen for Events in Payment Service**
```javascript
const eventBus = require("./EventBus");

eventBus.on("orderPlaced", (order) => {
  console.log(`Processing payment for order: ${order.id}`);
});
```
âœ… **Useful for event-driven monolithic applications or lightweight microservices.**

---

### **Conclusion**
- **Node.js Events**: Simple for in-memory event-driven logic.
- **Kafka/RabbitMQ**: Best for **distributed microservices** with message persistence.
- **Redis Pub/Sub**: Great for **real-time notifications and chat systems**.
- **Custom Event Bus**: Lightweight **event delegation** for monolithic applications.

Would you like **unit tests or CI/CD integration** for these event-driven systems? ðŸš€