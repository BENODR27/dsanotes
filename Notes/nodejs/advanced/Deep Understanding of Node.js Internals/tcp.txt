To use a **TCP server-client** system like the one described above in a **frontend application**, you typically can't directly connect to the server using TCP from the browser, as browsers only support **HTTP/HTTPS protocols** for communication. However, there are ways to bridge the gap and allow frontend applications to interact with a TCP server.

### **Frontend-Backend Communication Methods**:

1. **WebSockets (for real-time communication)**:
   - A WebSocket connection can be used to establish a bidirectional communication channel between the frontend and backend over a single, persistent connection.
   - The backend can either use **WebSocket directly** or expose a WebSocket server (via HTTP/S) to the frontend.

2. **HTTP APIs**:
   - The frontend can communicate with the backend using traditional HTTP methods (GET, POST, etc.), and the backend can then forward the communication to the TCP server.
   - This would involve the backend being the intermediary between the frontend (using HTTP) and the TCP server (using TCP).

### **Option 1: Using WebSockets in the Frontend**

A common method for using a TCP server in the frontend is by **exposing WebSockets** on the server and then using the WebSocket client in the frontend to connect.

#### **Steps to Implement WebSocket Communication**:

### **1. Update the TCP Server to Use WebSockets**:

You would need to add WebSocket support to the server side. The most common way to do this is by using the `ws` package in Node.js, which is a WebSocket implementation.

1. **Install WebSocket package (`ws`)**:

   ```bash
   npm install ws
   ```

2. **Create WebSocket Server**:
   
```js
const WebSocket = require('ws');
const net = require('net');
const wss = new WebSocket.Server({ port: 8081 }); // WebSocket server on port 8081

// Create a TCP server
const tcpServer = net.createServer((socket) => {
  console.log('Client connected to TCP server');

  // Handle TCP data here
  socket.on('data', (data) => {
    console.log('TCP Data:', data.toString());
    // You can forward this data to WebSocket clients
    broadcastToWebSocketClients(data.toString());
  });

  socket.on('end', () => {
    console.log('Client disconnected from TCP server');
  });
});

// Listen to the TCP server
tcpServer.listen(8080, () => {
  console.log('TCP Server listening on port 8080');
});

// Function to broadcast messages to all connected WebSocket clients
let wsClients = [];
function broadcastToWebSocketClients(message) {
  wsClients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(message);
    }
  });
}

// WebSocket connection handling
wss.on('connection', (ws) => {
  console.log('WebSocket client connected');
  
  wsClients.push(ws); // Add new client to the list

  ws.on('message', (message) => {
    console.log('Received message from WebSocket client:', message);
    // Send the message to the TCP server
    const tcpSocket = net.createConnection({ port: 8080 }, () => {
      tcpSocket.write(message);
      tcpSocket.end();
    });
  });

  ws.on('close', () => {
    console.log('WebSocket client disconnected');
    wsClients = wsClients.filter(client => client !== ws); // Remove client from the list
  });
});

```

### **Explanation of the WebSocket Server Code**:
- We create a WebSocket server on port `8081` (`wss`), which allows the frontend to connect.
- The WebSocket server listens for messages from clients (i.e., the frontend) and forwards those messages to the TCP server using the `net` module.
- The TCP server listens for messages and broadcasts any received data to all connected WebSocket clients, ensuring real-time communication between the TCP server and frontend.

---

### **2. Frontend WebSocket Client (HTML + JavaScript)**

Now, on the frontend, you can use the WebSocket API to connect to the WebSocket server we just created.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WebSocket Example</title>
</head>
<body>
  <h1>TCP Communication via WebSocket</h1>
  <input type="text" id="message" placeholder="Enter message">
  <button onclick="sendMessage()">Send Message</button>

  <div id="messages"></div>

  <script>
    // Connect to the WebSocket server
    const socket = new WebSocket('ws://localhost:8081');

    // Handle WebSocket connection
    socket.onopen = () => {
      console.log('Connected to WebSocket server');
    };

    // Handle incoming messages from WebSocket server (i.e., from TCP server)
    socket.onmessage = (event) => {
      const message = event.data;
      const messageDiv = document.createElement('div');
      messageDiv.textContent = `Received from server: ${message}`;
      document.getElementById('messages').appendChild(messageDiv);
    };

    // Send a message to WebSocket server
    function sendMessage() {
      const message = document.getElementById('message').value;
      socket.send(message);
    }

    // Handle WebSocket closure
    socket.onclose = () => {
      console.log('Disconnected from WebSocket server');
    };
  </script>
</body>
</html>
```

### **Explanation of the Frontend Code**:
- A **WebSocket connection** is established to the WebSocket server at `ws://localhost:8081`.
- The frontend sends messages to the server through the WebSocket connection when the "Send Message" button is clicked.
- The frontend listens for messages from the server and displays them in the `<div id="messages"></div>` element.
  
### **Steps to Run the Example**:

1. **Run the Backend** (with WebSocket and TCP Server):

   In your terminal, run the server code:

   ```bash
   node tcp-websocket-server.js
   ```

   The backend will be listening on port `8081` for WebSocket connections and forwarding data to/from the TCP server running on port `8080`.

2. **Run the Frontend**:

   Simply open the HTML file (`index.html`) in your browser. Ensure that your browser is able to connect to the WebSocket server on `ws://localhost:8081`.

3. **Interact**:

   - Enter a message in the input field.
   - Click "Send Message".
   - The message will be sent to the TCP server via the WebSocket, and the server will forward it back to all connected WebSocket clients.
   - You will see any responses displayed in the `<div id="messages"></div>`.

---

### **Option 2: Using HTTP API as Intermediary**

Another approach would be to create an **HTTP API** in your Node.js backend that acts as a bridge between the frontend and the TCP server. This would involve using **Express** or any other HTTP framework to forward HTTP requests to the TCP server.

#### **Steps to Implement**:
1. **Frontend**: Use AJAX or `fetch` API to send HTTP requests (POST or GET) to the backend.
2. **Backend**: The Node.js backend receives HTTP requests and forwards the data to the TCP server.

For example, with **Express**:

```js
const express = require('express');
const net = require('net');
const app = express();
const port = 3000;

app.use(express.json());

// HTTP endpoint to interact with TCP server
app.post('/send-message', (req, res) => {
  const message = req.body.message;
  
  // Connect to TCP server
  const tcpSocket = net.createConnection({ port: 8080 }, () => {
    tcpSocket.write(message);
    tcpSocket.end();
  });

  tcpSocket.on('data', (data) => {
    res.send({ response: data.toString() });
  });

  tcpSocket.on('end', () => {
    console.log('Message sent to TCP server');
  });
});

app.listen(port, () => {
  console.log(`HTTP API listening at http://localhost:${port}`);
});
```

Then, in the frontend, you can use the `fetch` API to call the HTTP endpoint:

```javascript
fetch('http://localhost:3000/send-message', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({ message: 'Hello, TCP Server!' }),
})
  .then(response => response.json())
  .then(data => {
    console.log('Received from TCP Server:', data.response);
  });
```

---

### **Conclusion**

While browsers can't directly communicate over TCP, you can use WebSockets to establish real-time, bidirectional communication between the frontend and your Node.js backend. The backend then handles communication with the TCP server, acting as an intermediary. Alternatively, you can use HTTP APIs to bridge the frontend and TCP server through standard web protocols.