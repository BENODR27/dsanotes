To implement load balancing with Node.js using Nginx, PM2, and Kubernetes, you can follow the steps below. I'll cover all three methods in detail, including setup and full code.

---

### 1. **Load Balancing with Nginx**

#### Steps:
1. **Install Nginx**:
   First, install Nginx on your machine or server.

   ```bash
   sudo apt update
   sudo apt install nginx
   ```

2. **Configure Nginx**:
   Update the Nginx configuration file to load balance traffic between multiple instances of your Node.js application.

   Edit the `/etc/nginx/sites-available/default` file and replace its content with:

   ```nginx
   upstream nodejs_backend {
       server 127.0.0.1:3001;
       server 127.0.0.1:3002;
       server 127.0.0.1:3003;
   }

   server {
       listen 80;

       location / {
           proxy_pass http://nodejs_backend;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection 'upgrade';
           proxy_set_header Host $host;
           proxy_cache_bypass $http_upgrade;
       }
   }
   ```

   - `127.0.0.1:3001`, `127.0.0.1:3002`, `127.0.0.1:3003`: These are the Node.js application instances.
   - `proxy_pass`: This forwards the incoming traffic to the Node.js backend.

3. **Restart Nginx**:
   After saving the changes, restart Nginx:

   ```bash
   sudo systemctl restart nginx
   ```

4. **Run Multiple Node.js Instances**:
   Now, start multiple instances of your Node.js app (each on different ports):

   ```bash
   node app.js --port=3001
   node app.js --port=3002
   node app.js --port=3003
   ```

   Your Node.js app should now be load-balanced through Nginx.

---

### 2. **Load Balancing with PM2**

#### Steps:
1. **Install PM2**:
   PM2 is a process manager for Node.js applications. Install it globally using npm.

   ```bash
   npm install pm2 -g
   ```

2. **Create a Node.js Application**:
   Create a simple `app.js` file that listens on a port:

   ```js
   const express = require('express');
   const app = express();
   const port = process.argv[2] || 3000;

   app.get('/', (req, res) => {
     res.send('Hello from Node.js!');
   });

   app.listen(port, () => {
     console.log(`Server is running on port ${port}`);
   });
   ```

3. **Run Multiple Instances Using PM2**:
   PM2 allows you to run multiple instances of your application and load balance between them. You can use the following command to start 3 instances:

   ```bash
   pm2 start app.js --name "node-app" -i 3
   ```

   - `-i 3`: This starts 3 instances of the app. PM2 will automatically load balance between them.

4. **PM2 Cluster Mode**:
   To further enhance performance, you can use PM2's cluster mode, which will fork multiple instances of the app based on the number of CPU cores available.

   ```bash
   pm2 start app.js -i max
   ```

   This will automatically start as many instances as the number of CPU cores.

5. **Monitor PM2**:
   To monitor the status of your Node.js applications:

   ```bash
   pm2 list
   pm2 logs
   ```

---

### 3. **Load Balancing with Kubernetes**

#### Steps:
1. **Install Kubernetes (Minikube for local setup)**:
   You can set up a Kubernetes cluster using Minikube for local development.

   ```bash
   minikube start
   ```

2. **Create a Node.js Application**:
   Same as before, create a `app.js` for the application.

   ```js
   const express = require('express');
   const app = express();

   app.get('/', (req, res) => {
     res.send('Hello from Node.js on Kubernetes!');
   });

   app.listen(3000, () => {
     console.log('App listening on port 3000');
   });
   ```

3. **Create a Dockerfile**:
   Create a `Dockerfile` to containerize your Node.js app.

   ```Dockerfile
   # Use official Node.js image from Docker Hub
   FROM node:14

   # Create and set working directory
   WORKDIR /usr/src/app

   # Copy package.json and install dependencies
   COPY package*.json ./
   RUN npm install

   # Copy application code
   COPY . .

   # Expose the port that the app listens on
   EXPOSE 3000

   # Start the app
   CMD ["node", "app.js"]
   ```

4. **Build Docker Image**:
   Build the Docker image for your Node.js app.

   ```bash
   docker build -t node-app .
   ```

5. **Push Docker Image to Docker Hub**:
   Optionally, push the image to Docker Hub for use in Kubernetes.

   ```bash
   docker tag node-app your-dockerhub-username/node-app
   docker push your-dockerhub-username/node-app
   ```

6. **Create Kubernetes Deployment and Service**:
   Create a `deployment.yaml` file to define the Kubernetes Deployment and Service.

   ```yaml
   apiVersion: apps/v1
   kind: Deployment
   metadata:
     name: node-app-deployment
   spec:
     replicas: 3
     selector:
       matchLabels:
         app: node-app
     template:
       metadata:
         labels:
           app: node-app
       spec:
         containers:
         - name: node-app
           image: your-dockerhub-username/node-app
           ports:
           - containerPort: 3000
   ---
   apiVersion: v1
   kind: Service
   metadata:
     name: node-app-service
   spec:
     selector:
       app: node-app
     ports:
       - protocol: TCP
         port: 80
         targetPort: 3000
     type: LoadBalancer
   ```

7. **Apply Kubernetes Resources**:
   Apply the deployment and service:

   ```bash
   kubectl apply -f deployment.yaml
   ```

8. **Access Your App**:
   After applying the configuration, Kubernetes will create a LoadBalancer to distribute traffic across the 3 replicas. You can access the app via Minikube's IP or by using an Ingress controller for more complex routing.

   ```bash
   minikube service node-app-service
   ```

---

### Conclusion:
- **Nginx**: Use for basic load balancing, good for distributed systems.
- **PM2**: Best for simple node.js apps in a single machine with process management.
- **Kubernetes**: Ideal for distributed applications, automatic scaling, and cloud deployments.

These are the basic setups for load balancing with Nginx, PM2, and Kubernetes for Node.js.