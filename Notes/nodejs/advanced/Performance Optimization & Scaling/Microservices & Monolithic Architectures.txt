Here’s a detailed guide on how you can implement **Monolithic** and **Microservices** architectures in **Node.js** with examples, designed to be used professionally in both scenarios.

---

### **Monolithic Architecture Example in Node.js**

In a monolithic architecture, you would build your application as a single unit, where the entire functionality resides in one codebase.

#### **Steps to Build a Simple Monolithic Node.js Application:**

1. **Install Node.js**: Ensure that Node.js is installed on your machine. You can download it from [here](https://nodejs.org/).

2. **Set up the project:**

   Create a new directory for your project and initialize it with `npm`:

   ```bash
   mkdir monolithic-app
   cd monolithic-app
   npm init -y
   ```

3. **Install dependencies**:

   For our example, we’ll use **Express** for routing and **MongoDB** for the database.

   ```bash
   npm install express mongoose
   ```

4. **Create the basic file structure**:

   ```
   monolithic-app/
   ├── server.js
   ├── models/
   │   └── user.js
   ├── routes/
   │   └── userRoutes.js
   ├── controllers/
   │   └── userController.js
   └── config/
       └── db.js
   ```

5. **Database Configuration (config/db.js)**:

   Here we set up the MongoDB connection.

   ```js
   const mongoose = require('mongoose');

   const connectDB = async () => {
     try {
       await mongoose.connect('mongodb://localhost:27017/monolithicDB', {
         useNewUrlParser: true,
         useUnifiedTopology: true,
       });
       console.log('MongoDB Connected...');
     } catch (err) {
       console.error(err);
       process.exit(1);
     }
   };

   module.exports = connectDB;
   ```

6. **User Model (models/user.js)**:

   The `User` model defines the data schema for users.

   ```js
   const mongoose = require('mongoose');

   const userSchema = new mongoose.Schema({
     name: { type: String, required: true },
     email: { type: String, required: true },
   });

   module.exports = mongoose.model('User', userSchema);
   ```

7. **User Controller (controllers/userController.js)**:

   The controller handles the logic for user operations.

   ```js
   const User = require('../models/user');

   // Get all users
   const getAllUsers = async (req, res) => {
     try {
       const users = await User.find();
       res.json(users);
     } catch (err) {
       res.status(500).json({ error: err.message });
     }
   };

   // Create a new user
   const createUser = async (req, res) => {
     try {
       const { name, email } = req.body;
       const newUser = new User({ name, email });
       await newUser.save();
       res.status(201).json(newUser);
     } catch (err) {
       res.status(500).json({ error: err.message });
     }
   };

   module.exports = { getAllUsers, createUser };
   ```

8. **User Routes (routes/userRoutes.js)**:

   The routes file handles the HTTP endpoints for user operations.

   ```js
   const express = require('express');
   const router = express.Router();
   const { getAllUsers, createUser } = require('../controllers/userController');

   // Route to get all users
   router.get('/', getAllUsers);

   // Route to create a user
   router.post('/', createUser);

   module.exports = router;
   ```

9. **Main Server (server.js)**:

   This is the entry point for the app where we initialize the Express server and connect to the database.

   ```js
   const express = require('express');
   const bodyParser = require('body-parser');
   const connectDB = require('./config/db');
   const userRoutes = require('./routes/userRoutes');

   const app = express();

   // Middleware to parse JSON bodies
   app.use(bodyParser.json());

   // Connect to DB
   connectDB();

   // Use user routes
   app.use('/api/users', userRoutes);

   // Start the server
   const PORT = process.env.PORT || 5000;
   app.listen(PORT, () => {
     console.log(`Server running on port ${PORT}`);
   });
   ```

#### **How to Run the Monolithic Application:**

1. Start your **MongoDB** server (make sure you have MongoDB installed and running).
2. Run the application:

   ```bash
   node server.js
   ```

3. Your app should be running at `http://localhost:5000`. You can test the endpoints:
   - `GET /api/users` - Get all users.
   - `POST /api/users` - Create a new user (send a JSON body with `name` and `email`).

---

### **Microservices Architecture Example in Node.js**

In a microservices architecture, you would break your application into smaller, self-contained services, each responsible for a specific functionality.

#### **Steps to Build Microservices Architecture in Node.js:**

1. **Set up the project structure for each service**:

   For simplicity, we'll create two microservices: `UserService` and `OrderService`.

   ```
   microservices-app/
   ├── user-service/
   │   ├── server.js
   │   ├── models/
   │   │   └── user.js
   │   └── routes/
   │       └── userRoutes.js
   └── order-service/
       ├── server.js
       ├── models/
       │   └── order.js
       └── routes/
           └── orderRoutes.js
   ```

2. **User Service**:

   - **User Model (user-service/models/user.js)**:

     ```js
     const mongoose = require('mongoose');

     const userSchema = new mongoose.Schema({
       name: { type: String, required: true },
       email: { type: String, required: true },
     });

     module.exports = mongoose.model('User', userSchema);
     ```

   - **User Controller (user-service/controllers/userController.js)**:

     ```js
     const User = require('../models/user');

     const createUser = async (req, res) => {
       const { name, email } = req.body;
       const newUser = new User({ name, email });
       await newUser.save();
       res.status(201).json(newUser);
     };

     const getUser = async (req, res) => {
       const { userId } = req.params;
       const user = await User.findById(userId);
       if (!user) return res.status(404).json({ error: 'User not found' });
       res.json(user);
     };

     module.exports = { createUser, getUser };
     ```

   - **User Routes (user-service/routes/userRoutes.js)**:

     ```js
     const express = require('express');
     const router = express.Router();
     const { createUser, getUser } = require('../controllers/userController');

     router.post('/', createUser);
     router.get('/:userId', getUser);

     module.exports = router;
     ```

   - **Main Server (user-service/server.js)**:

     ```js
     const express = require('express');
     const mongoose = require('mongoose');
     const userRoutes = require('./routes/userRoutes');

     const app = express();

     app.use(express.json());

     mongoose.connect('mongodb://localhost:27017/userService', {
       useNewUrlParser: true,
       useUnifiedTopology: true,
     });

     app.use('/api/users', userRoutes);

     const PORT = 5001;
     app.listen(PORT, () => {
       console.log(`User Service running on port ${PORT}`);
     });
     ```

3. **Order Service**:

   - **Order Model (order-service/models/order.js)**:

     ```js
     const mongoose = require('mongoose');

     const orderSchema = new mongoose.Schema({
       userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
       product: { type: String, required: true },
       quantity: { type: Number, required: true },
     });

     module.exports = mongoose.model('Order', orderSchema);
     ```

   - **Order Controller (order-service/controllers/orderController.js)**:

     ```js
     const Order = require('../models/order');

     const createOrder = async (req, res) => {
       const { userId, product, quantity } = req.body;
       const newOrder = new Order({ userId, product, quantity });
       await newOrder.save();
       res.status(201).json(newOrder);
     };

     const getOrder = async (req, res) => {
       const { orderId } = req.params;
       const order = await Order.findById(orderId);
       if (!order) return res.status(404).json({ error: 'Order not found' });
       res.json(order);
     };

     module.exports = { createOrder, getOrder };
     ```

   - **Order Routes (order-service/routes/orderRoutes.js)**:

     ```js
     const express = require('express');
     const router = express.Router();
     const { createOrder, getOrder } = require('../controllers/orderController');

     router.post('/', createOrder);
     router.get('/:orderId', getOrder);

     module.exports = router;
     ```

   - **Main Server (order-service/server.js)**:

     ```js
     const express = require('express');
     const mongoose = require('mongoose');
     const orderRoutes = require('./routes/orderRoutes');

     const app = express();

     app.use(express.json());

     mongoose.connect('mongodb://localhost:27017/orderService', {
       useNewUrlParser: true,
       useUnifiedTopology: true,
     });

     app.use('/api/orders', orderRoutes);

     const PORT = 5002;
     app.listen(PORT, () => {
       console.log(`Order Service running on port ${PORT}`);
     });
     ```

#### **Communication Between Microservices:**

You can use **REST APIs**, **message queues** (like RabbitMQ, Kafka), or other protocols to enable communication between these microservices.

For example, when the **Order Service** creates an order, it could make a **REST API call** to the **User Service** to verify user details.

---

### **How to Run the Microservices Application**:

1. Start MongoDB.
2. Run the **User Service**:

   ```bash
   node user-service/server.js
   ```

3. Run the **Order Service**:

   ```bash
   node order-service/server.js
   ```

4. Your services should be running on:
   - User Service: `http://localhost:5001/api/users`
   - Order Service: `http://localhost:5002/api/orders`

5. You can test these endpoints by sending requests with Postman or using any HTTP client.

---

### **Summary of Differences**:

- **Monolithic**: Single codebase, easier for small apps, but harder to scale as it grows. Simpler to set up and maintain for small teams.
- **Microservices**: Split into smaller, independent services, better for large-scale applications needing scalability and flexibility. More complex but offers greater fault tolerance and performance optimization.

By using **Node.js**, **MongoDB**, and **Express**, you can build either type of architecture, depending on the complexity and scale of your application.