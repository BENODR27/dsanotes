### **🚀 Professional TypeORM Usage with System Design & Architecture**  

TypeORM is a powerful **ORM (Object-Relational Mapper)** for Node.js and TypeScript that works with SQL databases like **MySQL, PostgreSQL, and SQLite**. It follows **repository and service patterns**, making it ideal for **large-scale applications**.

---

## **📌 System Design Architecture with TypeORM**
A well-structured architecture for a **professional** TypeORM project includes:
1. **Database Layer** (Entities, Migrations, Repositories)
2. **Service Layer** (Business Logic)
3. **Controller Layer** (API Endpoints)
4. **Middleware & Authentication**
5. **Unit & Integration Testing**
6. **CI/CD Integration**

**Folder Structure**
```
src/
│── config/
│   ├── database.ts         # TypeORM Configuration
│── entities/
│   ├── User.ts             # User Entity (Database Model)
│── repositories/
│   ├── UserRepository.ts   # Repository for Data Queries
│── services/
│   ├── UserService.ts      # Business Logic Layer
│── controllers/
│   ├── UserController.ts   # API Endpoints
│── middlewares/
│   ├── authMiddleware.ts   # Authentication Middleware
│── routes/
│   ├── userRoutes.ts       # User Routes
│── tests/
│   ├── UserService.test.ts # Unit & Integration Tests
│── index.ts                # App Entry Point
```
---

## **🛠 Step 1: Install Dependencies**
```sh
npm install typeorm reflect-metadata mysql2 express class-validator class-transformer
```

---

## **🚀 Step 2: TypeORM Configuration (Database Connection)**
📌 Create `src/config/database.ts`
```typescript
import "reflect-metadata";
import { DataSource } from "typeorm";
import { User } from "../entities/User";

export const AppDataSource = new DataSource({
    type: "mysql",
    host: "localhost",
    port: 3306,
    username: "root",
    password: "password",
    database: "ecommerce_db",
    synchronize: true, // ❗ Set to false in production
    logging: false,
    entities: [User],
});
```
---

## **📌 Step 3: Define User Entity (Database Model)**
📌 Create `src/entities/User.ts`
```typescript
import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn } from "typeorm";

@Entity()
export class User {
    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    name: string;

    @Column({ unique: true })
    email: string;

    @Column()
    password: string;

    @CreateDateColumn()
    createdAt: Date;
}
```
---

## **📌 Step 4: Create Repository (Database Queries)**
📌 Create `src/repositories/UserRepository.ts`
```typescript
import { AppDataSource } from "../config/database";
import { User } from "../entities/User";

export const UserRepository = AppDataSource.getRepository(User);
```
---

## **📌 Step 5: Implement Business Logic in Service Layer**
📌 Create `src/services/UserService.ts`
```typescript
import { User } from "../entities/User";
import { UserRepository } from "../repositories/UserRepository";
import bcrypt from "bcrypt";

export class UserService {
    async createUser(name: string, email: string, password: string): Promise<User> {
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = UserRepository.create({ name, email, password: hashedPassword });
        return await UserRepository.save(user);
    }

    async getUserByEmail(email: string): Promise<User | null> {
        return await UserRepository.findOne({ where: { email } });
    }

    async getAllUsers(): Promise<User[]> {
        return await UserRepository.find();
    }
}
```
---

## **📌 Step 6: Define API Endpoints in Controllers**
📌 Create `src/controllers/UserController.ts`
```typescript
import { Request, Response } from "express";
import { UserService } from "../services/UserService";

const userService = new UserService();

export class UserController {
    static async createUser(req: Request, res: Response) {
        try {
            const { name, email, password } = req.body;
            const user = await userService.createUser(name, email, password);
            res.status(201).json(user);
        } catch (error) {
            res.status(500).json({ message: "Error creating user" });
        }
    }

    static async getUsers(req: Request, res: Response) {
        const users = await userService.getAllUsers();
        res.json(users);
    }
}
```
---

## **📌 Step 7: Define Routes**
📌 Create `src/routes/userRoutes.ts`
```typescript
import express from "express";
import { UserController } from "../controllers/UserController";

const router = express.Router();

router.post("/users", UserController.createUser);
router.get("/users", UserController.getUsers);

export default router;
```
---

## **📌 Step 8: Implement Authentication Middleware**
📌 Create `src/middlewares/authMiddleware.ts`
```typescript
import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";

export const authMiddleware = (req: Request, res: Response, next: NextFunction) => {
    const token = req.header("Authorization")?.split(" ")[1];

    if (!token) return res.status(401).json({ message: "Unauthorized" });

    try {
        const decoded = jwt.verify(token, "SECRET_KEY");
        (req as any).user = decoded;
        next();
    } catch (error) {
        res.status(403).json({ message: "Invalid token" });
    }
};
```
---

## **📌 Step 9: Setup Express Server**
📌 Create `src/index.ts`
```typescript
import express from "express";
import { AppDataSource } from "./config/database";
import userRoutes from "./routes/userRoutes";

const app = express();
app.use(express.json());

app.use("/api", userRoutes);

AppDataSource.initialize().then(() => {
    console.log("🚀 Database Connected");
    app.listen(3000, () => console.log("Server running on port 3000"));
});
```
---

## **📌 Step 10: Run & Test API**
```sh
npm run dev
```
🔹 **Create User**
```sh
curl -X POST http://localhost:3000/api/users -H "Content-Type: application/json" -d '{"name":"Alice", "email":"alice@example.com", "password":"securepass"}'
```

🔹 **Get Users**
```sh
curl -X GET http://localhost:3000/api/users
```
---

## **🛠 Advanced Features for Production**
✅ **Migrations**  
```sh
npm install -g typeorm
typeorm migration:create -n CreateUserTable
```

✅ **Logging & Debugging**  
Enable SQL logging in `database.ts`:
```typescript
logging: true,  // Logs SQL Queries in Console
```

✅ **Unit Testing with Jest**  
Install Jest:
```sh
npm install --save-dev jest ts-jest @types/jest supertest
```

✅ **Dockerize TypeORM App**
📌 Create `Dockerfile`
```dockerfile
FROM node:16
WORKDIR /app
COPY package.json ./
RUN npm install
COPY . .
CMD ["npm", "run", "dev"]
```
---

## **🎯 Conclusion**
✅ **Fully Modular Architecture**  
✅ **Follows Repository & Service Pattern**  
✅ **Uses TypeORM for Efficient Database Operations**  
✅ **Supports Authentication & Security Best Practices**  

Would you like a **GraphQL API example with TypeORM** next? 🚀